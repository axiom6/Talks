<section id="AboutRxJS" style="width:1024px;">
    <h2>About RxJS</h2>
    <a href="https://github.com/Reactive-Extensions/RxJS">https://github.com/Reactive-Extensions/RxJS</a>
    <p style="text-align:left; font-size:14pt;">
      The Reactive Extensions for JavaScript (RxJS) is a set of libraries for composing asynchronous and event-based programs
      using observable sequences and fluent query operators that many of you already know by Array#extras in JavaScript.
      Using RxJS, developers represent asynchronous data streams with Observables, query asynchronous data streams using our
      many operators, and parameterize the concurrency in the asynchronous data streams using Schedulers.

      Simply put, RxJS = Observables + Operators + Schedulers.

      Whether you are authoring a web-based application in JavaScript or a server-side application in Node.js,
      you have to deal with asynchronous and event-based programming as a matter of course. Although some patterns
      are emerging such as the Promise pattern, handling exceptions, cancellation, and synchronization is difficult and error-prone.

      Using RxJS, you can represent multiple asynchronous data streams (that come from diverse sources, e.g., stock quote,
      tweets, computer events, web service requests, etc.), and subscribe to the event stream using the Observer object.
      The Observable notifies the subscribed Observer instance whenever an event occurs.

      Because observable sequences are data streams, you can query them using standard query operators implemented by the Observable type.
      Thus you can filter, project, aggregate, compose and perform time-based operations on multiple events easily by using these operators.
      In addition, there are a number of other reactive stream specific operators that allow powerful queries to be written.
      Cancellation, exceptions, and synchronization are also handled gracefully by using the methods on the Observable object.
    </p>
  </section>